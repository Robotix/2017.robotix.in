<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology Robotix Society, IIT Kharagpur</title>
    <description>Technology Robotix Society is an official society under the Technology Students' Gymkhana IIT Kharagpur.</description>
    <link>/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>The Induction Workshop</title>
        <description>&lt;p&gt;A peek into what their lives are going to be. A tiny taste of the awesome things that await them in this lush green campus, was given to the new-comers in the Induction workshop conducted by IIT Kharagpur, in association with the societies listed under it.&lt;/p&gt;

&lt;p&gt;One such vital part of this workshop was Robotics. A number of enthusiasts tried their hands at it and got to have the firsthand experience of what Team Robotix had to share.&lt;/p&gt;

&lt;p&gt;The four-day workshop took place in two phases. Each phase witnessed a participation of 50 students. The first day of both the phases was an introduction to what the Kharagpur robotics culture holds. A very basic scheme of what you can learn in robotics in kgp. An elementary idea of how you can grow and from where you can start if you wish to pursue it in the future.&lt;/p&gt;

&lt;p&gt;The enthusiasm of the attendees was noteworthy as many of them seemed adamant and interested in following robotics. The first day’s workshop ended on a very practical note, where the freshers and their mobile phones witnessed demonstration of three bots. Namely, the manual bot. A bot capable of climbing stairs with the unique design of its wheels. The mechanical difficulty in making the bot run came obvious to the audience when they tried running it on their own.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2017/induction-ws/IMG_1.jpg&quot; alt=&quot;1&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Secondly, there was the autonomous bot, a bot controlled by the gesture of one’s hand felt like magic for once. The literal view of something dancing on one’s gesture was a delight to watch.&lt;/p&gt;

&lt;p&gt;And lastly, an Image processing bot. Which looked simple enough but with just a camera, an arduino, a computer and a length of wire, bridged a gap which once seemed unfathomable. The gap between virtual and real world. A bot which followed a real object.
T
he second day of the workshop was probably the best part for the fresher, where they got to try their hands on soldering irons probably for the first time ever. They were explained the basic circuit which goes into the making of a remote control. And finally handed over some soldering 
iron and wire to try it out for themselves. The happiness on their faces for trying something new and practical was clearly visible.&lt;/p&gt;

&lt;p&gt;Team Robotix carried out the needful with perfection and punctuality which was appreciated. We hope to carry many such successful workshops throughout the year to help the Robotics culture grows vast and wide throughout the nation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2017/induction-ws/IMG_2.jpg&quot; alt=&quot;2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 10 Aug 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/the-induction-workshop/</link>
        <guid isPermaLink="true">/blog/the-induction-workshop/</guid>
      </item>
    
      <item>
        <title>Robotix 2017</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Making a bot is really simple. You just have to understand the problem
statement, think of a design and then make it alive. And for the
debugging part, that’s easy too, except for a few million complications.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When a critical soul questioned me about my motivation to follow
robotics, I was speechless. Not that I didn’t have anything to say,
but because I had so much to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where do I begin I thought to myself. The rush to learn something new or
the goodness that fills when that motor gushes for the first time. Not
to mention the emotions that get welled up when your Bluetooth gives you
a green signal. And what about the feeling when you want to give up but
you don’t and when finally you make it work, every sleepless moment
spent on making that relay click starts feeling blissful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;-Robotix 2017 participant&lt;/p&gt;

&lt;p&gt;Asia’s largest techno-management fest became an honorable host to such
emotions. Kshitij 2017 witnessed some of the largest participation
previously seen. The manual event – Bomb disposal, as expected saw the
maximum participation among the three events. Also, the autonomous event&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;B.R.I.C.K.S. was a success in every term. Lastly, the IP event -
Conquest, made the contestants storm their brains out, making their bot
run the sweetest of all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The participants, irrespective of who won or who didn’t, definitely had
one common opinion- they had loads of fun. The debugging and calibration
session for the bots was admittedly the most sweet and sour experience
that the participants had all along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bomb Disposal - A manual event&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2017/fest/1.jpg&quot; alt=&quot;Bomb Disposal&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This event could be explained in a few words - Innovation at its best.
Though the participants had a tough mechanism to tackle, it was done in
some marvelous ways. The mechanism was to design a bot that was capable
of cutting wires and lifting blocks. There were two arenas which were
occupied the whole time. The event witnessed many moving as well as
cutting mechanisms which used high speed cutters, solder irons, wire
clippers and in some cases the most creative use of scissors ever
witnessed. To sum up, Bomb disposal was a blast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bricks – A semi autonomous event&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2017/fest/2.jpg&quot; alt=&quot;BRICKS&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How can a task as trivial as picking and placing things be made
fun-filled? Just tell them to do it autonomously. Tell them to have a
wireless control and a few sensors fitted here and there. A few
mechanical complications and voila! There you have it.&lt;/p&gt;

&lt;p&gt;The participants had to make an autonomous bot capable of distinguishing
between solid and hollow blocks. It was to be traversed using wireless
bluetooth module.&lt;/p&gt;

&lt;p&gt;Bricks became a first-hand spectator of the youth’s enthusiasm towards
autonomous robotics. Students showcased their talents combined with their
perseverance on a wooden arena.&lt;/p&gt;

&lt;p&gt;People came to know about how hard it is to make and then to debug a bot.
But the energy of the arena screamed how much fun it was to be a part of
it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONQUEST- The IP event&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2017/fest/3.jpg&quot; alt=&quot;CONQUEST&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image processing event made us realize how far we have come in
robotics from where we started. We are almost at the verge of completing
the bridge between the virtual and the real world. Think about this,
taking a video feed from an overhead camera and telling the bot its left
and right after processing the surrounding using that feed. It’s just
amazing.&lt;/p&gt;

&lt;p&gt;The event saw the participation of around 20 teams and enthusiastically
so. The bot run wasn’t as simple, but when the bots finally ran, the look
on the participant’s face was worth cherishing. True happiness.&lt;/p&gt;

&lt;p&gt;The overall story of Robotix 2017 sums up in a few words. Raw that became
bots, bots that became emotions, emotions that became people and people
who became Robotix 2017!&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/robotix-2k17/</link>
        <guid isPermaLink="true">/blog/robotix-2k17/</guid>
      </item>
    
      <item>
        <title>Registrations for Robotix 2017</title>
        <description>&lt;h4 id=&quot;registration-for-robotix-2017-are-now-open&quot;&gt;Registration for ROBOTIX 2017 are now open.&lt;/h4&gt;

&lt;p&gt;For all the event details of Robotix 2017, visit: &lt;a href=&quot;https://2017.robotix.in/event/&quot;&gt;Robotix 2017 - Events&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All Team members are required to register at the Kshitij website before team formation. One of the 
team members should act as captain and invite all other members to his team from the &lt;em&gt;Invitations&lt;/em&gt; section as 
explained below. The other members should accept the invitation to join the team from their own Kshitij accounts. 
Only the captain can dismantle the entire team while individual members may leave the team anytime. The captain 
is also known as the &lt;em&gt;leader&lt;/em&gt; at some places.&lt;/p&gt;

&lt;h5 id=&quot;for-registrations&quot;&gt;For Registrations:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Visit Kshitij website: &lt;a href=&quot;http://www.ktj.in&quot;&gt;http://www.ktj.in/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Register on the website by clicking &lt;em&gt;SIGNUP&lt;/em&gt; at the bottom of the home page after entering the site.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/1.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fill in all the details. &lt;strong&gt;Note:&lt;/strong&gt; There are two parts of this. You will need to fill in both the parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/2.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/3.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now you will be automatically logged in your account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/4.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now click on &lt;em&gt;MYKTJ&lt;/em&gt; at the bottom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/5.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now click on &lt;em&gt;teams&lt;/em&gt;. After doing that this page should be shown.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/6.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now click on the &lt;em&gt;Event Registration dropbox&lt;/em&gt;. You select the event (BRICKS, Conquest, Bomb Disposal in 
 which you want to participate) and then click on register.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/7.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now you have to form a team. For this select the drop box with title &lt;em&gt;Select a team-mate&lt;/em&gt; from the drop 
 box and choose your team mate’s name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can only select a teammate after he/she has registered on the KTJ site. You will find the name 
 of the person in the drop box list. You cannot use a find feature here and you will have to do this manually&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/8.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After that you have to select a event for which you want to form the team. For that click on the drop box with title 
 &lt;em&gt;Select an event&lt;/em&gt;. Click on the event which you have already registered before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/9.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now click on &lt;em&gt;Send an invite&lt;/em&gt;. Now sit back and relax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/10.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now your teammate has to accept the request. Ask you teammate to go to his &lt;em&gt;MYKTJ&lt;/em&gt; page and click on &lt;em&gt;Invitations&lt;/em&gt; tab. 
 This will appear.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/11.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After the teammate accepts the request, the &lt;em&gt;leader&lt;/em&gt; ie. the one who registered for the event can see this on his &lt;em&gt;MYKTJ&lt;/em&gt; page in the &lt;em&gt;Invitations&lt;/em&gt; tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/12.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If by chance, at any step, you logged out. Then you can still log back in. To that go to the homepage 
 &lt;a href=&quot;http://www.ktj.in&quot;&gt;www.ktj.in&lt;/a&gt;. From there click on &lt;em&gt;LOGIN&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/13.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fill out your username and password and login!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/regs-2017/14.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For further queries, you can contact:&lt;/p&gt;

&lt;h5 id=&quot;sourish-ghosh&quot;&gt;Sourish Ghosh&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Contact No: 7980623482&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email Id:&lt;/strong&gt; &lt;a href=&quot;mailto:sourish@robotix.in&quot;&gt;&lt;strong&gt;sourish@robotix.in&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;sreyansh-jain&quot;&gt;Sreyansh Jain&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Contact No: 9933958066&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Dec 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/registration-for-robotix-2017/</link>
        <guid isPermaLink="true">/blog/registration-for-robotix-2017/</guid>
      </item>
    
      <item>
        <title>The 2016 Annual Kolkata Robotics Workshop</title>
        <description>&lt;h5 id=&quot;road-to-robotix-2017&quot;&gt;Road to Robotix 2017&lt;/h5&gt;

&lt;p&gt;It’s time once again for the enriching and fun filled Annual Kolkata workshop organised by Technology Robotix Society in collaboration with Kshitij, IIT Kharagpur . The workshop is our first pit-stop as we kickstart our journey towards Robotix 2017!&lt;/p&gt;

&lt;p&gt;You will witness the live demonstrations of some fascinating robots as well as a Quadrotor. Full introduction on the fundamentals of autonomous robotics and image processing will be presented. We will be explaining events that will be conducted in Robotix 2017.&lt;/p&gt;

&lt;h5 id=&quot;when&quot;&gt;When?&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;13th November, 2016 (Sunday), 9 AM onwards&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;where&quot;&gt;Where?&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Vidya Mandir Auditorium, Near Minto Park/Birla High School, 1 &amp;amp; 2 Moira Street, Elgin, Kolkata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/cal-ws/cal.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We promise we would leave you all astonished with the magnificence of robotics. We hope to see all of you there!&lt;/p&gt;

&lt;h5 id=&quot;register-here-httpktjinkolkataworkshop&quot;&gt;Register here: &lt;a href=&quot;http://ktj.in/kolkataworkshop&quot;&gt;http://ktj.in/kolkataworkshop&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Please note that it is mandatory to register yourself if you want to attend. Since there are limited number of seats, only the first few registrants will be mailed a confirmation code, a print out of which will have to be produced at the venue. You will not be allowed to enter if you do not have the print out of the confirmation code.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/annual-kolkata-workshop-2017/</link>
        <guid isPermaLink="true">/blog/annual-kolkata-workshop-2017/</guid>
      </item>
    
      <item>
        <title>Internal Hackathon</title>
        <description>&lt;p&gt;For the first time Technology Robotix Society organised a Hackathon for its members to give them the experience of building their first autonomous robots and put into practice what they learnt in previous knowledge sessions. 
The members participated with full enthusiasm. 
They were divided into teams and given a choice of two problem statements on which they had to work for the night.&lt;/p&gt;

&lt;p&gt;Either they could make a gesture controlled robot, which used an accelerometer to gauge the tilt of the hand, which was then used as an input for the code they wrote such that the bot moved depending on the movement of the accelerometer. 
The accelerometer used was adxl335 and it was powered by arduino to which it was connected by jumper wires, or they could make a smartphone controlled robot, which used Bluetooth as the method of communication and the smartphone gave input to the microprocessor on which the appropriate code was burned such that the robot moved according to the commands given by the smartphone. 
Both robots were arduino based, and this allowed the members to familiarise themselves with the working of the open source development board. 
In both the problem statements the basic code was the same. 
It contained functions for moving the bot forward, backward, left, and right and these functions were called in the main loop according to the input from the respective devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/hackathon/1.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/hackathon/2.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The members used the already made robosoccer bot chassis and connected the microprocessor to the motors thus successfully running their robots. 
It was a fun night with lots of learning included. 
The members were successful in making their robots with guidance from the sub heads. 
And it was an excellent experience of getting introduced into the world of robotics for the members.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/internal-hackathon/</link>
        <guid isPermaLink="true">/blog/internal-hackathon/</guid>
      </item>
    
      <item>
        <title>Robosoccer Competition 2016</title>
        <description>&lt;p&gt;Robosoccer was the first technical event in the campus which gave chance to freshers to make their first manual bot and find their interest in robotics. This marks the first milestone in the journey to learn robotics. This event gave chance to the participants to show case their skills and ideas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/robosoccer/1.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A robosoccer bot that participants made used differential drive mechanism to move around. The main aim of the robot was to play a game of soccer in one on one match against the other bot. Participants were supposed to make a suitable chassis design which can compete in the the match and also make the control box of the bot. Kraig classes 101 and 102 were conducted to teach the basic concepts of drive mechanism and circuitry used in control box.&lt;/p&gt;

&lt;p&gt;The event was conducted on 28th august. A high turnout of participants was seen in the event. There were around 32 teams each consisting of 3 members. The event started in the morning around 10 and lasted till 9 in the evening.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/robosoccer/1.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each match was of 4 minutes, participants were supposed to change sides after 2 minutes. Those four minutes were most intriguing for the teams who were playing the match. Event was conducted in two rounds. The first round was league round. 32 teams were divided into 8 groups. From each group 2 teams best teams were selected for second round. Second round was knock out round. In second round the crowd was getting crazy , they were in full support of their friends and cheered for them. There were many good matches in which winner could not be decided up till the last second.  Finals was played between team RS-25   ALPHA TEAM and RS-23 Transformers.The lead was continuously changing sides which resulted in a neck to neck match between the two. Finally the match was won by ALPHA TEAM.Members of the winning team were Haque Farazul,Rahul Dayal,Moin Sheikh.&lt;/p&gt;

&lt;p&gt;The winning formula for the event was your control on the bot. In all robosoccer event was a success, we saw many  innovative ideas to improve the efficiency and design of the bot and the enthusiasm of the candidates really made the event a memorable one. At the end each and every participant was feeling good after making their first manually controlled bot; no matter they lost or won they just enjoyed the event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/robosoccer/3.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/robosoccer-2016/</link>
        <guid isPermaLink="true">/blog/robosoccer-2016/</guid>
      </item>
    
      <item>
        <title>Intro Workshop 2k16</title>
        <description>&lt;p&gt;Once again the society considered as the heart and soul for all the
numerous worth praising Robotix related initiatives of KGP came up with
its encouraging and enthusiastic introductory seminar to spread the ever
increasing Robotics temperament among the very excited UG freshers who
turned out as ever, in great numbers, occupying every single corner of
Kalidas Auditorium to behold the preview for the exciting year TRS
already planned to go through.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/intro-workshop/1.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The workshop began with a glimpse of the work the society did for
creating the tech-savvy Robotix environment among all the Kgpians. The
freshers were informed about the in-house events, the classes, workshops,
learning opportunities and were given a peek into the extravaganza that
Robotix 2016 will turn out to be. Glimpses of the previous edition
fascinated the attendees and gave them an overview of the impact and
outreach of Team Robotix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/intro-workshop/2.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The videos of the society operations and the previous fest left the
freshers awestruck. There also were robot demonstrations on stage, along
with quadcopter flying sessions, that were the heart and the soul of the
event. Three robots were demonstrated in totality, one being the light
follower robot that could follow a beam of light thrown to its front,
another being the gesture controlled robot that could be moved using
hand movements and the final one being a robot that could follow a preset
color of objects using a camera feed. The demonstrations left the
audience in wonder and gave them a look and feel regarding the technical
operations of the society.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/intro-workshop/3.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The events for Robotix 2016 were first disclosed to the public forum on
the same stage, and a brief overview of the same was also given. To keep
the audience in action, several brain teasers, goodie questions and
interactive chats took place which made the event even more enjoyable for
the already amazed freshers. At the same time the fruitful opportunity
was given to all the new robotics enthusiasts to curb down their
technical doubts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/intro-workshop/4.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There was universal acclaim for the amount of work put in for making the
seminar a success. The final result was a real inspiration for freshers
and a motivation for Team Robotix to continue in its endeavors of
spreading robotics culture around and making IITKGP the hub of robotics
education.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/intro-workshop/5.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Aug 2016 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/intro-workshop/</link>
        <guid isPermaLink="true">/blog/intro-workshop/</guid>
      </item>
    
      <item>
        <title>Living Robotix 2016- ‘Memoir inoubliable!’</title>
        <description>&lt;p&gt;&lt;em&gt;21st January 2016­&lt;/em&gt; - A Red Letter Day for all the technocrats eagerly waiting
for some dynamic events in the world of robotics.Precisely,it was the day
when curtains were raised for the annual Techno­management fest Kshitij
2016 and along with it was launched the 16th edition of the annual robotics
charade ,&lt;strong&gt;ROBOTIX 2016!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the years, the popularity of the fest has increased by leaps and
bounds. It goes without saying that the standards have risen­ grown like
skyscrapers.The main target audience of the competitions was primarily the
undergraduate students of numerous technical institutions across India.The
events were ingeniously crafted for increasing the participation of students-
while maintaining the standards set by the previous iterations and overall
intricacy.&lt;/p&gt;

&lt;p&gt;The events were categorized into Manual Robotics, Autonomous and Semi-
Autonomous Robotics and Computer Vision.&lt;/p&gt;

&lt;p&gt;It was quite obvious that the &lt;em&gt;Manual&lt;/em&gt; event &lt;strong&gt;Summit&lt;/strong&gt; witnessed maximum
participation.Prima facie the problem statement included building a stair
climbing robot able to pick and store objects on its way. The event saw
some mind boggling designs and runs! The number of teams were close to
100.
&lt;img src=&quot;/img/blog/2016/01/summit_run.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second manual event &lt;strong&gt;Droid Blitz&lt;/strong&gt; was conducted in collaboration with
Kshitij. It required building an &lt;em&gt;Amphibious Robot&lt;/em&gt;. This event also saw good
quality participation. It succeeded in pooling participation of 50 teams.&lt;/p&gt;

&lt;p&gt;This year’s &lt;em&gt;Autonomous&lt;/em&gt; Robotics events consisted of &lt;strong&gt;Sherlock&lt;/strong&gt; and &lt;em&gt;Semi-
Autonomous&lt;/em&gt; event &lt;strong&gt;Warehouse&lt;/strong&gt; .With a combined participation of over 60
teams it proved that the events tested the mettle of participants.
IR reception and decoding along with path optimization and magnetic
heading following was the USP of sherlock, while Warehouse dealt with
gesture control robots capable of storing blocks based on their RFID tags.
&lt;img src=&quot;/img/blog/2016/01/warehouse_run.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S.H.E.L.D.O.N&lt;/strong&gt;, the &lt;em&gt;Computer Vision&lt;/em&gt; event required building of an
autonomous robot capable of detecting characters using concepts of Image
Processing and traversing them such that the expression satisfied a certain
condition.The challenge albeit difficult was tackled by some really nice
codes and algorithms and witnessed participation of 20 teams.
&lt;img src=&quot;/img/blog/2016/01/sheldon_run.jpg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To wrap up the discussion we must admit that the annual robotics
extravaganza proved yet again to be a cherry on the cake for our techno-
management fest Kshitij.&lt;/p&gt;

&lt;p&gt;KUDOS To the entire &lt;strong&gt;Team Robotix&lt;/strong&gt; (&lt;em&gt;Technology Robotix Society&lt;/em&gt;) for once
again proving their mettle and completing the fest with flying colours.
Living upto the phrase ‘Carpe Diem’,the participants, support team and
organising team succeeded in bringing out an awe­inspiring event which
was one of its kind.
So bidding Au revoir to Robotix 2016, we are indeed looking forward to
various meticulously planned events in near future.
Till then as we say, stay Geared Up!&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Mar 2016 04:24:04 +0530</pubDate>
        <link>http://localhost:4000/blog/living-robotix-2016/</link>
        <guid isPermaLink="true">/blog/living-robotix-2016/</guid>
      </item>
    
      <item>
        <title>Decoding the event Sherlock</title>
        <description>&lt;p&gt;Well it’s good to see that you’ve decided to participate in Robotix 2016. Let’s get you through the event in a few easy steps through this easy to follow DIY.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The Sherlock robot is a basic differential drive chassis with a few sensors aboard. The two primary sensors are the &lt;em&gt;HMC5883L&lt;/em&gt; magnetic digital compass that can be interfaced with the help of I2C communication protocol and the &lt;em&gt;TSOP1738&lt;/em&gt; IR receiver. Both of these are really common and the basic codes for both of them are pretty easy on a microcontroller like Arduino. Usage of these sensors is fairly simple and more information is available on our &lt;a href=&quot;/tutorial/event/sherlock/&quot;&gt;tutorial page&lt;/a&gt; for Sherlock. What matters most is the code and algorithms that drive your robot! That’s what this tutorial covers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Round 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Round 1 can be completed without any significant algorithmic knowledge. The robot &lt;strong&gt;does not&lt;/strong&gt; have to decode the entire map on the start node.  On start node, the robot receives a message in the form:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 12 51 72 500 400 22 51 2 260 20 500&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The ‘400’ and ‘500’ are the start and end values of the message respectively. There are 2 pieces of information given by the message.&lt;/p&gt;

&lt;p&gt;First:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;12 denotes that it is the first of the 2 total messages.&lt;/li&gt;
  &lt;li&gt;51 is the ID of the start node.&lt;/li&gt;
  &lt;li&gt;72 is the finish point for the run. Let’s say the treasure is at node with ID 72. :-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Second:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;22 denotes that it is the second of the 2 total messages.&lt;/li&gt;
  &lt;li&gt;51 is the ID of the start node&lt;/li&gt;
  &lt;li&gt;2 is the ID of the next node connected to the start, at an absolute heading of 260 degrees wrt north. The cost to the path is 20. In Round 1, all the costs are set to 20 by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus now the robot has to align itself as close to 260 degrees wrt north as possible, and then move forward until it encounters node 2. When it reaches node 2, it receives a message in the form&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 11 2 5 120 20 500&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;11 denotes that it is the first of the total 1 message. 2 is the ID of the node, while the information is that the next node is node 5, at heading 120 degrees wrt north. So the robot now has to turn by 140 (260-120) degrees to align itself to that heading and move forward until it encounters node 5.&lt;/p&gt;

&lt;p&gt;In a similar way, it has to keep moving and following nodes until it reaches the finish point, i.e. node 72.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Round 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Round 2, the problem becomes highly algorithmic and hence challenging. The start node now gives the robot an overview of the entire connected graph. The start node message thus now looks like:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 13 51 2 3 4 450 3 2 5 450 4 2 5 6 450 5 3 4 7 450 6 4 7 450 7 5 6 8 450 8 7 9 72 450 500 400 23 51 72 500 400 33 51 2 220 20 500&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Don’t be overawed by the length. The length would be much much more longer. And don’t be overawed by that too, everything would be handled by the microcontroller!&lt;/p&gt;

&lt;p&gt;Here’s what every single word of that gibberish means:&lt;/p&gt;

&lt;p&gt;As evident, there are now three pieces of information from this code, from the three pairs of start (400) and stop (500) bits. I’m going to cover the second and third parts first, as they are pretty similar to what was there in Round 1.&lt;/p&gt;

&lt;p&gt;Second:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;23 denotes that it is the second of the 3 total messages.&lt;/li&gt;
  &lt;li&gt;51 is the ID of the start node.&lt;/li&gt;
  &lt;li&gt;72 is the finish point for the run. Let’s say the treasure is at node with ID 72. :-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Third:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;33 denotes that it is the third of the 3 total messages&lt;/li&gt;
  &lt;li&gt;51 is the ID of the start node&lt;/li&gt;
  &lt;li&gt;2 is the ID of the next node connected to the start, at an absolute heading of 220 degrees wrt north. The cost to the path is 20.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now coming back to the first information. The long message is decoded as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;13 denotes that it is the first of the 3 total messages&lt;/li&gt;
  &lt;li&gt;51 is the ID of the start node&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After this the separator (450) separated numbers denote the nodes and their connections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;So,
    &lt;ul&gt;
      &lt;li&gt;2 is connected to 3 and 4.&lt;/li&gt;
      &lt;li&gt;3 is connected to 2 and 5.&lt;/li&gt;
      &lt;li&gt;4 is connected to 2, 5 and 6.&lt;/li&gt;
      &lt;li&gt;5 is connected to 3, 4 and 7.&lt;/li&gt;
      &lt;li&gt;6 is connected to 4 and 7.&lt;/li&gt;
      &lt;li&gt;7 is connected to 5, 6 and 8.&lt;/li&gt;
      &lt;li&gt;8 is connected to 7, 9 and 72.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence the robot now knows a complete connected graph. Here’s roughly what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/2016/01/image_0.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thus now the robot has to align itself as close to 220 degrees wrt north as possible, and then move forward until it encounters node 2. When it reaches node 2, it receives a message in the form&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 11 2 3 150 10 450 4 100 15 500&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which means that the node 2 is connected to 3 and 4 at headings of 150 degrees and 100 degrees and via paths of costs of 10 and 15 respectively.&lt;/p&gt;

&lt;p&gt;What remains unknown are the path weights to the end point. As the problem statement says, the robot has to minimize a weighted sum of path costs and no. of nodes. The no. of nodes problem is a simple one, akin to a shortest path problem in graph theory. It can be solved using a really simple technique called breadth first search (BFS)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breadth First Search (BFS) Algorithm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Breadth First Search is an algorithm used for searching and traversing graphs. It is a really simple to implement technique to find the shortest way from start to end in a connected graph. In BFS, we keep marking nodes as visited as soon as we find a way to reach them, initially all being unmarked. Then we keep count of the minimum number of steps required to reach the node. We continue exploring neighbours of the visited nodes. Hence we are able to calculate the shortest path to reach the final node. When all the nodes are visited at least once, the algorithm stops and we get an answer, which can be proven to be right by the techniques of mathematical induction. Here’s a pseudocode that implements such an algorithm:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ran&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;–&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reachable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;–&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;also&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avoid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cycles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predecessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;
		&lt;span class=&quot;no&quot;&gt;Check&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reached&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can appreciate, we can write a simple code to traverse such a graph. The information stored in Sherlock would mostly be in the form of an adjacency list, and BFS can be modified slightly to give our results in a &lt;code class=&quot;highlighter-rouge&quot;&gt;O(nlog(n))&lt;/code&gt; time complexity.&lt;/p&gt;

&lt;p&gt;Another algorithm used to search graphs is depth first search (DFS), but it is not used to calculate shortest paths as the result may or may not be correct. Speed depends on type and shape of graph. If the graph bifurcates too many times, BFS may be quite slow, and DFS may cruise through to the end point. DFS is suitable to be used if the robot actually has to move to the end vertex without knowing the graph. Since all the motion to the end is happening in the code itself, we’d prefer an algorithm that gives us the correct answer.&lt;/p&gt;

&lt;p&gt;The next problem lies with the path weights/costs. Minimizing costs on a known graph is an old and well solved problem, using a modified form of breadth first search algorithm, called Djikstra’s algorithm. Another algorithm A* (pronounced A-star) may be used too, but that’s just like the gamble between BFS and DFS. Djikstra’s algorithm always gives the correct answer, but might slow down a bit due to its nature of opening up all neighbours to a node in a highly divergent graph. Also the algorithm is valid only for positive edge weights, which is the case here. So we would not go into the Bellman Ford’s algorithm and stick to Djikstra and A*&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Djikstra’s Algorithm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Djikstra’s algorithm, just like breadth first search traverses all neighbours of visited nodes and marks them visited, while keeping count of the minimum cost required to reach that node. It returns information for the minimum cost required to reach any node from the start point. It is simply a modification of BFS and hence the pseudocode is easy to understand.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preceding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;U&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unfinished&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;/* Initialization: initialization every distance to INFINITY until we discover a path */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INFINITY&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;/* The distance from the source to the source is defined to be zero */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;/* This loop corresponds to sending out the explorers walking the paths, where
 * the step of picking &quot;the vertex, v, with the shortest path to s&quot; corresponds
 * to an explorer arriving at an unexplored vertex */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;pick&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;sr&quot;&gt;/* The next step is sometimes given the confusing name &quot;relaxation&quot; */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;possibly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depending&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, this pseudocode accounts for cyclic loops too, as it updates the node weights if it traversed the node again, and our event requires the same.&lt;/p&gt;

&lt;p&gt;Here we attach a pseudocode for the A star algorithm, without explanation. &lt;a href=&quot;http://mat.uab.cat/~alseda/MasterOpt/AStar-Algorithm.pdf&quot;&gt;Here’s the link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far so good. But as it may be evident, we have two main problems that YOU have to tackle to make a successful robot for event Sherlock.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Graph weights are not known at the beginning in round 2. You have to calculate the coefficients of the bi-quadratic weight functions, i.e. a,b,c,d,e as in the equation&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;While doing so, it must not eat up the tiny memory of the Arduino!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yes, the second problem is something you might not have thought of, and is a major one. One recommendation would be to use an Arduino Mega over an Uno, but a recursive code might even eat up a Mega’s memory. Well written iterative codes would work good both on Uno and Mega, with Mega having more margin for error. The Uno has 2 kilobytes of SRAM and the mega, 8 kilobytes. Considering 2 byte ints, it wouldn’t take too long to fill up, and recursive functions would fail almost definitely.&lt;/p&gt;

&lt;p&gt;Another solution would be to use the Flash memory, the Uno has 32kb, while the Mega has a nice 256 kilobytes! The flash memory is best for data that is constant and does not need to be modified further. For example, our graph array or list can be safely stored in the flash memory without worries. For usage of the Flash memory on Arduino, check out &lt;a href=&quot;https://www.arduino.cc/en/Reference/PROGMEM&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first part is where the essence of the event lies. The robot initially does not know anything about the edge costs. The robot initially would take a biquadratic equation and keep constructing simultaneous equations until they become 5 in number.&lt;/p&gt;

&lt;p&gt;The five equations would be of the form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the robot would know the edge costs as well, and hence after that the robot will come to know the entire graph with the edge costs as well. Now after that it is simply a Djikstra’s algorithm problem which can be solved with ease. Using the iterative code, the robot can find the minimum cost path in seconds and then follow the headings to reach the end point.&lt;/p&gt;

&lt;p&gt;So here’s to flaunt your algorithmic skills and be the eventual champion of Sherlock, Robotix 2016!&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jan 2016 04:30:00 +0530</pubDate>
        <link>http://localhost:4000/blog/decoding-sherlock/</link>
        <guid isPermaLink="true">/blog/decoding-sherlock/</guid>
      </item>
    
      <item>
        <title>10 things to look out for in Robotix 2016</title>
        <description>&lt;p&gt;With less than a month left for the annual Robotix festival, Team Robotix presents to you 10 things to keep yourself prepared and updated with Robotix 2016.&lt;/p&gt;

&lt;h4 id=&quot;new-and-exciting-events&quot;&gt;&lt;strong&gt;New and exciting events&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;this-year-we-present-to-you-5-events-with-all-unique-and-exciting-problem-statements&quot;&gt;This year we present to you 5 events with all unique and exciting problem statements.&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;/event/&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image02.jpg&quot; alt=&quot;Events&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Robotix edition will see one of its kind Manual, Autonomous, Semi Autonomous and Computer Vision events. In Manual category we have Summit and Droid Blitz. Warehouse in Semi-Autonomous, Sherlock in Autonomous and S.H.E.L.D.O.N in Computer Vision.&lt;/p&gt;

&lt;h4 id=&quot;facebook-page&quot;&gt;&lt;strong&gt;Facebook Page&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;one-place-to-stay-updated-with-all-the-details&quot;&gt;One place to stay updated with all the details.&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/robotixiitkgp/&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image05.jpg&quot; alt=&quot;Events&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like us &lt;a href=&quot;https://www.facebook.com/robotixiitkgp/&quot;&gt;@robotixiitkgp&lt;/a&gt; and stay updated with all the things that happen at the Technology Robotix Society. From events, mechanical design competition, to interesting videos and articles on the current happenings in the world of robotics, you can find a lot here.&lt;/p&gt;

&lt;h4 id=&quot;event-discussion-forums&quot;&gt;&lt;strong&gt;Event discussion forums&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;to-provide-the-participants-with-any-help-regarding-that-event&quot;&gt;To provide the participants with any help regarding that event.&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/robotixiitkgp/photos/a.198792120232599.37976.198785160233295/800749380036867/&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image10.jpg&quot; alt=&quot;Events Forums&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join the groups and find all the event related resources available there. From event PS to rules, tutorials, etc. Post any event specific doubts and we will be happy to clear them for you.&lt;/p&gt;

&lt;p&gt;Join at:&lt;br /&gt;
&lt;a href=&quot;http://bit.do/summit-event&quot;&gt;Summit&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://bit.do/warehouse-event&quot;&gt;Warehouse&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://bit.do/sheldon-event&quot;&gt;S.H.E.L.D.O.N&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://bit.do/sherlock-event&quot;&gt;Sherlock&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://bit.do/droidblitz-event&quot;&gt;Droid Blitz&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;robotics-tutorials&quot;&gt;&lt;strong&gt;Robotics Tutorials&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;enthusiastic-about-robotics-you-belong-here&quot;&gt;Enthusiastic about robotics! You belong here.&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;/tutorial/&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image09.jpg&quot; alt=&quot;Tutorials&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We provide you with numerous tutorials,  starting right from the very basics of robotics. Categorized under several headings like autonomous, manual, image processing etc. they are sure to embark you upon this wonderful journey into the world of robotics, successfully.&lt;/p&gt;

&lt;h4 id=&quot;event-tutorials&quot;&gt;&lt;strong&gt;Event Tutorials&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;the-single-best-thing-to-ensure-successful-participation&quot;&gt;The single best thing to ensure successful participation.&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;/tutorial/&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image03.jpg&quot; alt=&quot;Event Tutorials&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We provide detailed tutorials for each event that will guide you step by step to learn and build the robot for that event and participate in ROBOTIX 2016.&lt;/p&gt;

&lt;p&gt;Quick links:&lt;br /&gt;
&lt;a href=&quot;https://www.robotix.in/tutorial/event/sheldon/&quot;&gt;S.H.E.L.D.O.N. Tutorial&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.robotix.in/tutorial/event/sherlock/&quot;&gt;Sherlock Tutorial&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.robotix.in/tutorial/event/warehouse/&quot;&gt;Warehouse Tutorial&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.robotix.in/tutorial/event/summit/&quot;&gt;Summit Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;kshitij-website&quot;&gt;&lt;strong&gt;Kshitij Website&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;visit-wwwktjin-and-register-yourself-now&quot;&gt;Visit www.ktj.in and register yourself. Now!&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ktj.in&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image04.jpg&quot; alt=&quot;KTJ.in&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to participate you will have to register for the events.&lt;br /&gt;
Visit &lt;a href=&quot;https://www.ktj.in&quot;&gt;ktj.in&lt;/a&gt; and register for all the events. Read our accompanying &lt;a href=&quot;/blog/ticket-to-robotix-2016/&quot;&gt;blog post&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h4 id=&quot;blog&quot;&gt;&lt;strong&gt;Blog&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;subscribe-to-us-to-not-miss-a-thing&quot;&gt;Subscribe to us to not miss a thing.&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;/blog/&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image01.jpg&quot; alt=&quot;Blog&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read our blog to learn about the happenings at Technology Robotix Society along with articles on the current work in the field of robotics.&lt;br /&gt;
Do not forget to click on the &lt;a href=&quot;/feed.xml&quot;&gt;Subscribe vis RSS&lt;/a&gt; button.&lt;/p&gt;

&lt;h4 id=&quot;action-buttons&quot;&gt;&lt;strong&gt;Action Buttons&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/event/summit/&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image06.png&quot; alt=&quot;Action Buttons&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you missed the red floating icon at the bottom right of this page, make sure to click on it!&lt;br /&gt;
The Event pages contains important links to the Tutorial, DIY’s, Discussion Forum and also information about Prize Money.&lt;/p&gt;

&lt;h4 id=&quot;youtube-channel&quot;&gt;&lt;strong&gt;YouTube Channel&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;one-place-for-all-videos-related-to-our-events-tutorials-simulations&quot;&gt;One place for all videos related to our events, tutorials, simulations.&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://youtube.com/subscription_center?add_user=RobotixIITkgp&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image08.jpg&quot; alt=&quot;Action Buttons&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit our &lt;a href=&quot;http://youtube.com/subscription_center?add_user=RobotixIITkgp&quot;&gt;YouTube channel&lt;/a&gt; to see past and this year’s videos. From event teasers to tutorials, to a glimpse of Robotix 2015, you’ll find them all.&lt;/p&gt;

&lt;h4 id=&quot;android-app&quot;&gt;&lt;strong&gt;Android App&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;be-mobile&quot;&gt;Be mobile!&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=in.robotix.robotixapp&quot;&gt;&lt;img src=&quot;/img/blog/2015/07/image07.jpg&quot; alt=&quot;Android&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download our &lt;a href=&quot;https://play.google.com/store/apps/details?id=in.robotix.robotixapp&quot;&gt;Android app&lt;/a&gt; to receive notifications and all updates on your phone.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2015 23:30:00 +0530</pubDate>
        <link>http://localhost:4000/blog/10-things-to-look-out-for/</link>
        <guid isPermaLink="true">/blog/10-things-to-look-out-for/</guid>
      </item>
    
  </channel>
</rss>
